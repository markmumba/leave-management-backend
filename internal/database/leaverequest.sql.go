// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: leaverequest.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const deleteLeaveRequest = `-- name: DeleteLeaveRequest :exec
DELETE FROM
  LeaveRequests
WHERE
  request_id = $1
`

func (q *Queries) DeleteLeaveRequest(ctx context.Context, requestID int32) error {
	_, err := q.db.ExecContext(ctx, deleteLeaveRequest, requestID)
	return err
}

const getAllLeaveRequests = `-- name: GetAllLeaveRequests :many
SELECT
  request_id, user_id, leave_type_id, start_date, end_date, status, reason, manager_id, created_at
FROM
  LeaveRequests
`

func (q *Queries) GetAllLeaveRequests(ctx context.Context) ([]Leaverequest, error) {
	rows, err := q.db.QueryContext(ctx, getAllLeaveRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Leaverequest
	for rows.Next() {
		var i Leaverequest
		if err := rows.Scan(
			&i.RequestID,
			&i.UserID,
			&i.LeaveTypeID,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.Reason,
			&i.ManagerID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const leaveRequest = `-- name: LeaveRequest :exec
INSERT INTO
  LeaveRequests(
    user_id,
    leave_type_id,
    start_date,
    end_date,
    status,
    reason,
    manager_id
  )
VALUES
  ($1, $2, $3, $4, $5, $6, $7)
`

type LeaveRequestParams struct {
	UserID      sql.NullInt32
	LeaveTypeID sql.NullInt32
	StartDate   time.Time
	EndDate     time.Time
	Status      string
	Reason      sql.NullString
	ManagerID   sql.NullInt32
}

func (q *Queries) LeaveRequest(ctx context.Context, arg LeaveRequestParams) error {
	_, err := q.db.ExecContext(ctx, leaveRequest,
		arg.UserID,
		arg.LeaveTypeID,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
		arg.Reason,
		arg.ManagerID,
	)
	return err
}

const leaveStatusUpdate = `-- name: LeaveStatusUpdate :exec
UPDATE
  LeaveRequests
SET
  status = $1
WHERE
  request_id = $2
`

type LeaveStatusUpdateParams struct {
	Status    string
	RequestID int32
}

func (q *Queries) LeaveStatusUpdate(ctx context.Context, arg LeaveStatusUpdateParams) error {
	_, err := q.db.ExecContext(ctx, leaveStatusUpdate, arg.Status, arg.RequestID)
	return err
}

const updateLeaveRequest = `-- name: UpdateLeaveRequest :exec
UPDATE
  LeaveRequests
SET
  leave_type_id = $1,
  start_date = $2,
  end_date = $3,
  reason = $4
WHERE
  request_id = $5
`

type UpdateLeaveRequestParams struct {
	LeaveTypeID sql.NullInt32
	StartDate   time.Time
	EndDate     time.Time
	Reason      sql.NullString
	RequestID   int32
}

func (q *Queries) UpdateLeaveRequest(ctx context.Context, arg UpdateLeaveRequestParams) error {
	_, err := q.db.ExecContext(ctx, updateLeaveRequest,
		arg.LeaveTypeID,
		arg.StartDate,
		arg.EndDate,
		arg.Reason,
		arg.RequestID,
	)
	return err
}

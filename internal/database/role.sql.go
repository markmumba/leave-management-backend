// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: role.sql

package database

import (
	"context"
)

const createRole = `-- name: CreateRole :one
INSERT INTO
  Roles (role_name)
VALUES
  ($1) RETURNING role_name
`

func (q *Queries) CreateRole(ctx context.Context, roleName Roletype) (Roletype, error) {
	row := q.db.QueryRowContext(ctx, createRole, roleName)
	var role_name Roletype
	err := row.Scan(&role_name)
	return role_name, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM
  Roles
WHERE
  role_id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, roleID int32) error {
	_, err := q.db.ExecContext(ctx, deleteRole, roleID)
	return err
}

const findRole = `-- name: FindRole :one
SELECT
  role_id, role_name
FROM
  Roles
WHERE
  role_name = $1
`

func (q *Queries) FindRole(ctx context.Context, roleName Roletype) (Role, error) {
	row := q.db.QueryRowContext(ctx, findRole, roleName)
	var i Role
	err := row.Scan(&i.RoleID, &i.RoleName)
	return i, err
}

const updateRole = `-- name: UpdateRole :exec
UPDATE
  Roles
SET
  role_name = $1
WHERE
  role_id = $1
`

func (q *Queries) UpdateRole(ctx context.Context, roleName Roletype) error {
	_, err := q.db.ExecContext(ctx, updateRole, roleName)
	return err
}
